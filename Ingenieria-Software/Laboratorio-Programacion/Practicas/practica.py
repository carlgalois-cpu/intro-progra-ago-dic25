# -*- coding: utf-8 -*-
"""practica.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kkOvaTKr6O6A3CoqXKmqYX8nPp5rOqw8
"""

# Los conjuntos son colecciones no ordenadas, mutables y sin elementos duplicados.
conjuntos_A= {1, 2, 3, "python", True, 3.14}
print(f"Conjunto original: {conjuntos_A}")

# issubset(), .issuperset(), .isdisjoint(), .copy()

A = {1, 2, 3}
B = {1, 2, 3, 4, 5}
C = {4, 5}

# .issubset() ¿A es subconjunto de B?
print(f"A es subconjunto de B: {A.issubset(B)}")

# .issuperset() ¿B es superconjunto de A?
print(f"B es superconjunto de A: {B.issuperset(A)}")

# .isdisjoint() ¿A y C son disjuntos? (no tienen elementos en común)
print(f"A y C son disjuntos: {A.isdisjoint(C)}")

# .copy() crea una copia superficial
copia_A = A.copy()
print(f"Copia de A: {copia_A}")

print("=" * 50)
print("MÉTODOS DE CONJUNTOS")
print("=" * 50)

# Crear dos conjuntos simples
amigos_juan = {"Ana", "Luis", "Carlos", "María"}
amigos_maria = {"María", "Carlos", "Elena", "Pedro"}

print("Amigos de Juan:", amigos_juan)
print("Amigos de María:", amigos_maria)
print()

# Método 1: issubset() - ¿Es subconjunto?
print("1. ¿Todos los amigos de Juan son amigos de María?")
if amigos_juan.issubset(amigos_maria):
    print("   ✅ SÍ, todos los amigos de Juan también son de María")
else:
    print("   ❌ NO, no todos los amigos de Juan son de María")

# Método 2: issuperset() - ¿Es superconjunto?
print("\n2. ¿María tiene todos los amigos de Juan?")
# Métodos de Consulta y Comparación - Compañero 4
if amigos_maria.issuperset(amigos_juan):
    print("   ✅ SÍ, María tiene todos los amigos de Juan")
else:
    print("   ❌ NO, María no tiene todos los amigos de Juan")

# Método 3: intersection() - Amigos en común
amigos_comunes = amigos_juan.intersection(amigos_maria)
print("\n3. Amigos en común:", amigos_comunes)

# Método 4: difference() - Amigos que solo tiene Juan
solo_juan = amigos_juan.difference(amigos_maria)
print("4. Amigos que solo tiene Juan:", solo_juan)

# Método 5: isdisjoint() - ¿No tienen amigos en común?
if amigos_juan.isdisjoint(amigos_maria):
    print("5. ❌ No tienen amigos en común")
else:
    print("5. ✅ Tienen amigos en común")

print("\n" + "=" * 50)
print("EJEMPLO CON WHILE")
print("=" * 50)

# Ejemplo con WHILE - Sistema de búsqueda
print("Vamos a buscar amigos en común...")

# Contador para el while
contador = 0
buscar_mas = "s"  # Empezamos buscando

while buscar_mas == "s":
    contador += 1
    print(f"\n--- Búsqueda número {contador} ---")

    # Pedir nombre para buscar
    nombre = input("¿Qué amigo quieres buscar? ").strip()

    # Verificar si está en los conjuntos
    if nombre in amigos_juan and nombre in amigos_maria:
        print(f"✅ {nombre} es amigo de AMBOS")
    elif nombre in amigos_juan:
        print(f"✅ {nombre} es amigo solo de JUAN")
    elif nombre in amigos_maria:
        print(f"✅ {nombre} es amigo solo de MARÍA")
    else:
        print(f"❌ {nombre} no es amigo de ninguno")

    # Preguntar si quiere buscar más
    buscar_mas = input("\n¿Quieres buscar otro amigo? (s/n): ").lower().strip()

print(f"\nHiciste {contador} búsquedas. ¡Adiós!")